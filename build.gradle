buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: "org.asciidoctor", name: "asciidoctorj-pdf", version: "1.5.0-alpha.16"
        classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:3.5.0"
    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.6"
    id "java"
    id "eclipse"
    id "signing"
}

group = "org.mamotec"
version = "1.6.4"

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'org.json:json:20231013'
    implementation 'com.ghgande:j2mod:2.5.0'
    testImplementation group: "junit", name: "junit", version: "4.13.2"
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

asciidoctor {
    backends = ["pdf", "html5"]
    attributes "stylesheet": "mamotec-asciidoc.css",
            "toc2": "left",
            "sampleSrc": file("src/sample/java"),
            "source-highlighter": "coderay",
            "pdf-stylesdir": "./",
            "pdf-style": "pdf"

    resources {
        from("src/main/resources") {
            include "images/**"
        }
    }
}

sourceSets {
    sample
    itest {
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

configurations {
    jacoco
    jacocoRuntime
}

jar {
    manifest {
        version = project.version.replace("-", ".");
    }
}

task instrument {
    ext.outputDir = buildDir.path + '/classes-instrumented'
    doLast {
        ant.taskdef(name: 'instrument', classname: 'org.jacoco.ant.InstrumentTask', classpath: configurations.jacoco.asPath)

        sourceSets.main.output.classesDirs.each { f ->
            copy {
                from f
                into buildDir.path + '/instrumented_classes'
            }
        }

        ant.instrument(destdir: outputDir) {
            fileset(dir: buildDir.path + '/instrumented_classes')
        }
    }
}

instrument.dependsOn classes

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(instrument)) {
        tasks.withType(Test) {
            doFirst {
                systemProperty 'jacoco-agent.destfile', buildDir.path + '/jacoco/tests.exec'
                classpath = files(instrument.outputDir) + classpath + configurations.jacocoRuntime
            }
        }
    }
}

task report {
    doLast {
        if (!file(buildDir.path + '/jacoco/tests.exec').exists()) {
            return;
        }
        ant.taskdef(name: 'report', classname: 'org.jacoco.ant.ReportTask', classpath: configurations.jacoco.asPath)
        ant.report() {
            executiondata {
                ant.file(file: buildDir.path + '/jacoco/tests.exec')
            }
            structure(name: 'Example') {
                classfiles {
                    fileset(dir: buildDir.path + '/instrumented_classes')
                }
                sourcefiles {
                    fileset(dir: 'src/main/java')
                }
            }
            html(destdir: buildDir.path + '/reports/jacoco')
        }
    }
}

report.dependsOn instrument
report.dependsOn test

task jarAll(type: Copy) {
    dependsOn(configurations.default.getAllArtifacts().getBuildDependencies())

    from configurations.default.getAllArtifacts().getFiles()
    into "build/libs-all"
}

build.dependsOn asciidoctor
build.dependsOn jarAll

eclipse.pathVariables([GRADLE_USER_HOME: file(gradle.gradleUserHomeDir)])
tasks.eclipse.dependsOn cleanEclipse

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

javadoc {
    exclude "**/internal/**"
    exclude "**/java-gen/**"
}

task writeSettings {
    doLast {
        Writer out = new OutputStreamWriter(new FileOutputStream("build/settings.gradle"));
        out.write("include ");
        boolean first = true;
        for (Project myproject : subprojects) {
            if (myproject.getProjectDir().equals(getProjectDir())) {
                continue;
            }
            if (first) {
                first = false;
            } else {
                out.write ", ";
            }
            out.write '"' + myproject.name + '"'
        }
        out.write "\n\n";

        for (Project myproject : subprojects) {
            if (myproject.getProjectDir().equals(getProjectDir())) {
                continue;
            }
            println myproject.name
            out.write 'project(":' + myproject.name + '").projectDir = file("' + myproject.getProjectDir().toString().substring((int) (getProjectDir().toString().size() + 1)) + '")\n';
        }

        out.close();
    }
}
